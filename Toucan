-- Pet Plant Manager GUI System for Roblox
-- Place this in StarterGui or StarterPlayerScripts

local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")

local player = Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")

-- Configuration
local PET_DISTANCE = 8 -- How close pets stay to assigned plants
local UPDATE_INTERVAL = 0.5
local ANIMATION_TIME = 0.3

-- Data storage
local plantAssignments = {} -- [plant] = {pets = {}, position = Vector3}
local allPlants = {}
local allPets = {}
local lastUpdate = 0

-- GUI Creation
local function createMainGUI()
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "PetPlantManager"
    screenGui.ResetOnSpawn = false
    screenGui.Parent = playerGui

    -- Minimized Icon
    local iconFrame = Instance.new("ImageButton")
    iconFrame.Name = "MinimizedIcon"
    iconFrame.Size = UDim2.new(0, 60, 0, 60)
    iconFrame.Position = UDim2.new(0, 20, 0.5, -30)
    iconFrame.BackgroundColor3 = Color3.fromRGB(34, 139, 34)
    iconFrame.BorderSizePixel = 0
    iconFrame.Visible = false
    iconFrame.Parent = screenGui

    local iconCorner = Instance.new("UICorner")
    iconCorner.CornerRadius = UDim.new(0, 30)
    iconCorner.Parent = iconFrame

    local iconLabel = Instance.new("TextLabel")
    iconLabel.Size = UDim2.new(1, 0, 1, 0)
    iconLabel.BackgroundTransparency = 1
    iconLabel.Text = "🌱"
    iconLabel.TextColor3 = Color3.new(1, 1, 1)
    iconLabel.TextScaled = true
    iconLabel.Font = Enum.Font.SourceSansBold
    iconLabel.Parent = iconFrame

    -- Main Menu Frame
    local mainFrame = Instance.new("Frame")
    mainFrame.Name = "MainMenu"
    mainFrame.Size = UDim2.new(0, 400, 0, 500)
    mainFrame.Position = UDim2.new(0.5, -200, 0.5, -250)
    mainFrame.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
    mainFrame.BorderSizePixel = 0
    mainFrame.Active = true
    mainFrame.Draggable = true
    mainFrame.Parent = screenGui

    local mainCorner = Instance.new("UICorner")
    mainCorner.CornerRadius = UDim.new(0, 12)
    mainCorner.Parent = mainFrame

    -- Title Bar
    local titleBar = Instance.new("Frame")
    titleBar.Name = "TitleBar"
    titleBar.Size = UDim2.new(1, 0, 0, 40)
    titleBar.BackgroundColor3 = Color3.fromRGB(34, 139, 34)
    titleBar.BorderSizePixel = 0
    titleBar.Parent = mainFrame

    local titleCorner = Instance.new("UICorner")
    titleCorner.CornerRadius = UDim.new(0, 12)
    titleCorner.Parent = titleBar

    local titleFix = Instance.new("Frame")
    titleFix.Size = UDim2.new(1, 0, 0, 12)
    titleFix.Position = UDim2.new(0, 0, 1, -12)
    titleFix.BackgroundColor3 = Color3.fromRGB(34, 139, 34)
    titleFix.BorderSizePixel = 0
    titleFix.Parent = titleBar

    local titleLabel = Instance.new("TextLabel")
    titleLabel.Size = UDim2.new(1, -80, 1, 0)
    titleLabel.Position = UDim2.new(0, 10, 0, 0)
    titleLabel.BackgroundTransparency = 1
    titleLabel.Text = "Pet Plant Manager"
    titleLabel.TextColor3 = Color3.new(1, 1, 1)
    titleLabel.TextScaled = true
    titleLabel.Font = Enum.Font.SourceSansBold
    titleLabel.TextXAlignment = Enum.TextXAlignment.Left
    titleLabel.Parent = titleBar

    -- Minimize Button
    local minimizeBtn = Instance.new("TextButton")
    minimizeBtn.Name = "MinimizeButton"
    minimizeBtn.Size = UDim2.new(0, 30, 0, 30)
    minimizeBtn.Position = UDim2.new(1, -40, 0, 5)
    minimizeBtn.BackgroundColor3 = Color3.fromRGB(255, 193, 7)
    minimizeBtn.BorderSizePixel = 0
    minimizeBtn.Text = "—"
    minimizeBtn.TextColor3 = Color3.new(0, 0, 0)
    minimizeBtn.TextScaled = true
    minimizeBtn.Font = Enum.Font.SourceSansBold
    minimizeBtn.Parent = titleBar

    local minCorner = Instance.new("UICorner")
    minCorner.CornerRadius = UDim.new(0, 15)
    minCorner.Parent = minimizeBtn

    -- Content Area
    local contentFrame = Instance.new("ScrollingFrame")
    contentFrame.Name = "Content"
    contentFrame.Size = UDim2.new(1, -20, 1, -60)
    contentFrame.Position = UDim2.new(0, 10, 0, 50)
    contentFrame.BackgroundTransparency = 1
    contentFrame.ScrollBarThickness = 8
    contentFrame.ScrollBarImageColor3 = Color3.fromRGB(34, 139, 34)
    contentFrame.Parent = mainFrame

    local contentLayout = Instance.new("UIListLayout")
    contentLayout.SortOrder = Enum.SortOrder.LayoutOrder
    contentLayout.Padding = UDim.new(0, 10)
    contentLayout.Parent = contentFrame

    -- Refresh Button
    local refreshBtn = Instance.new("TextButton")
    refreshBtn.Name = "RefreshButton"
    refreshBtn.Size = UDim2.new(1, 0, 0, 35)
    refreshBtn.BackgroundColor3 = Color3.fromRGB(34, 139, 34)
    refreshBtn.BorderSizePixel = 0
    refreshBtn.Text = "🔄 Refresh Plants & Pets"
    refreshBtn.TextColor3 = Color3.new(1, 1, 1)
    refreshBtn.TextScaled = true
    refreshBtn.Font = Enum.Font.SourceSans
    refreshBtn.LayoutOrder = 1
    refreshBtn.Parent = contentFrame

    local refreshCorner = Instance.new("UICorner")
    refreshCorner.CornerRadius = UDim.new(0, 8)
    refreshCorner.Parent = refreshBtn

    return screenGui, mainFrame, iconFrame, contentFrame, refreshBtn, minimizeBtn
end

-- Plant Detection (Toucans Game Specific)
local function findAllPlants()
    allPlants = {}
    
    print("=== SEARCHING FOR TOUCANS PLANTS ===")
    print("Looking specifically for Honey Suckle and other Toucans plants...")
    
    -- Search workspace for Toucans-specific plants
    for _, obj in pairs(workspace:GetChildren()) do
        local objName = obj.Name:lower()
        print("Checking object:", obj.Name, "Type:", obj.ClassName)
        
        -- Toucans game specific plant names
        local isToucansPlant = objName:find("honey") or 
                              objName:find("suckle") or 
                              objName:find("honeysuckle") or
                              objName:find("plant") or
                              objName:find("tree") or
                              objName:find("flower") or
                              objName:find("fruit") or
                              objName:find("crop") or
                              objName:find("farm")
        
        if isToucansPlant then
            print("Found Toucans plant:", obj.Name)
            -- Accept both Models and Parts
            if obj:IsA("Model") or obj:IsA("Part") or obj:IsA("UnionOperation") then
                table.insert(allPlants, obj)
                print("✅ Added Toucans plant:", obj.Name, "Type:", obj.ClassName)
            end
        end
    end
    
    -- Check player's plot/farm area (common in Toucans-style games)
    if player.Character then
        local character = player.Character
        local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
        if humanoidRootPart then
            print("Searching near player position for plants...")
            local playerPos = humanoidRootPart.Position
            
            -- Look for plants within reasonable distance (100 studs)
            for _, obj in pairs(workspace:GetChildren()) do
                if (obj:IsA("Model") or obj:IsA("Part")) and obj ~= character then
                    local objPos = nil
                    if obj:IsA("Model") and obj.PrimaryPart then
                        objPos = obj.PrimaryPart.Position
                    elseif obj:IsA("Part") then
                        objPos = obj.Position
                    end
                    
                    if objPos and (objPos - playerPos).Magnitude <= 100 then
                        local objName = obj.Name:lower()
                        if objName:find("honey") or objName:find("suckle") or 
                           objName:find("plant") or objName:find("flower") then
                            if not table.find(allPlants, obj) then
                                table.insert(allPlants, obj)
                                print("✅ Added nearby plant:", obj.Name)
                            end
                        end
                    end
                end
            end
        end
    end
    
    -- If still nothing, show all objects for manual identification
    if #allPlants == 0 then
        print("⚠️ NO PLANTS FOUND! Here are ALL workspace objects:")
        for i, obj in pairs(workspace:GetChildren()) do
            if i <= 30 then -- Show more objects
                print(i, obj.Name, obj.ClassName, obj.Parent.Name)
            end
        end
        print("Please tell me the EXACT name of your Honey Suckle!")
    end
    
    print("=== TOUCANS PLANT SEARCH COMPLETE ===")
    print("Total plants found:", #allPlants)
end

-- Pet Detection (Toucans Game Specific)
local function findAllPets()
    allPets = {}
    
    print("=== SEARCHING FOR TOUCANS (PETS) ===")
    print("Player name:", player.Name)
    
    -- Search for Toucans specifically
    for _, obj in pairs(workspace:GetChildren()) do
        local objName = obj.Name:lower()
        local isToucan = false
        
        -- Toucans game specific detection
        if objName:find("toucan") then
            print("Found Toucan by name:", obj.Name)
            isToucan = true
        elseif objName:find("pet") and objName:find(player.Name:lower()) then
            print("Found pet with player name:", obj.Name)
            isToucan = true
        elseif objName:find("bird") then
            print("Found bird (might be Toucan):", obj.Name)
            isToucan = true
        elseif obj:FindFirstChild("Owner") then
            local owner = obj:FindFirstChild("Owner")
            if (owner:IsA("StringValue") and owner.Value == player.Name) or
               (owner:IsA("ObjectValue") and owner.Value == player) then
                print("Found pet by Owner tag:", obj.Name)
                isToucan = true
            end
        end
        
        -- Also check for pets that might be following the player
        if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local playerPos = player.Character.HumanoidRootPart.Position
            local objPos = nil
            
            if obj:IsA("Model") and obj.PrimaryPart then
                objPos = obj.PrimaryPart.Position
            elseif obj:IsA("Part") then
                objPos = obj.Position
            end
            
            if objPos and (objPos - playerPos).Magnitude <= 20 then
                if objName:find("toucan") or objName:find("pet") or objName:find("bird") then
                    if not isToucan then
                        print("Found nearby potential Toucan:", obj.Name)
                        isToucan = true
                    end
                end
            end
        end
        
        if isToucan then
            if obj:IsA("Model") or obj:IsA("Part") or obj:IsA("UnionOperation") then
                if not table.find(allPets, obj) then
                    table.insert(allPets, obj)
                    print("✅ Added Toucan:", obj.Name, "Type:", obj.ClassName)
                end
            end
        end
    end
    
    -- Check if pets might be in a folder
    local petFolders = {"Pets", "Toucans", "Birds", player.Name .. "_Pets"}
    for _, folderName in pairs(petFolders) do
        local folder = workspace:FindFirstChild(folderName)
        if folder then
            print("Found potential pet folder:", folderName)
            for _, pet in pairs(folder:GetChildren()) do
                table.insert(allPets, pet)
                print("✅ Added pet from folder:", pet.Name)
            end
        end
    end
    
    -- If no pets found, show nearby objects
    if #allPets == 0 then
        print("⚠️ NO TOUCANS FOUND! Here are objects near you that might be pets:")
        if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local playerPos = player.Character.HumanoidRootPart.Position
            local count = 0
            
            for _, obj in pairs(workspace:GetChildren()) do
                if count >= 15 then break end
                local objPos = nil
                
                if obj:IsA("Model") and obj.PrimaryPart then
                    objPos = obj.PrimaryPart.Position
                elseif obj:IsA("Part") then
                    objPos = obj.Position
                end
                
                if objPos and (objPos - playerPos).Magnitude <= 30 then
                    print(count + 1, obj.Name, obj.ClassName, "Distance:", math.floor((objPos - playerPos).Magnitude))
                    count = count + 1
                end
            end
        end
    end
    
    print("=== TOUCAN SEARCH COMPLETE ===")
    print("Total Toucans found:", #allPets)
end

-- Create Plant Selection UI
local function createPlantCard(plant, contentFrame)
    local cardFrame = Instance.new("Frame")
    cardFrame.Name = "PlantCard_" .. plant.Name
    cardFrame.Size = UDim2.new(1, 0, 0, 120)
    cardFrame.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
    cardFrame.BorderSizePixel = 0
    cardFrame.LayoutOrder = #contentFrame:GetChildren() + 1
    cardFrame.Parent = contentFrame

    local cardCorner = Instance.new("UICorner")
    cardCorner.CornerRadius = UDim.new(0, 8)
    cardCorner.Parent = cardFrame

    -- Plant Info
    local plantName = Instance.new("TextLabel")
    plantName.Size = UDim2.new(0.6, 0, 0, 25)
    plantName.Position = UDim2.new(0, 10, 0, 5)
    plantName.BackgroundTransparency = 1
    plantName.Text = plant.Name
    plantName.TextColor3 = Color3.new(1, 1, 1)
    plantName.TextScaled = true
    plantName.Font = Enum.Font.SourceSansBold
    plantName.TextXAlignment = Enum.TextXAlignment.Left
    plantName.Parent = cardFrame

    -- Assigned Pets Count
    local petCount = Instance.new("TextLabel")
    petCount.Name = "PetCount"
    petCount.Size = UDim2.new(0.35, 0, 0, 20)
    petCount.Position = UDim2.new(0.6, 0, 0, 5)
    petCount.BackgroundTransparency = 1
    petCount.Text = "Pets: 0"
    petCount.TextColor3 = Color3.fromRGB(150, 150, 150)
    petCount.TextScaled = true
    petCount.Font = Enum.Font.SourceSans
    petCount.TextXAlignment = Enum.TextXAlignment.Right
    petCount.Parent = cardFrame

    -- Pet Selection Area
    local petArea = Instance.new("ScrollingFrame")
    petArea.Name = "PetArea"
    petArea.Size = UDim2.new(1, -20, 0, 60)
    petArea.Position = UDim2.new(0, 10, 0, 30)
    petArea.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    petArea.BorderSizePixel = 0
    petArea.ScrollBarThickness = 4
    petArea.ScrollingDirection = Enum.ScrollingDirection.X
    petArea.CanvasSize = UDim2.new(0, 0, 1, 0)
    petArea.Parent = cardFrame

    local petAreaCorner = Instance.new("UICorner")
    petAreaCorner.CornerRadius = UDim.new(0, 4)
    petAreaCorner.Parent = petArea

    local petLayout = Instance.new("UIListLayout")
    petLayout.FillDirection = Enum.FillDirection.Horizontal
    petLayout.SortOrder = Enum.SortOrder.LayoutOrder
    petLayout.Padding = UDim.new(0, 5)
    petLayout.Parent = petArea

    -- Add Pet Buttons
    local totalWidth = 0
    for i, pet in ipairs(allPets) do
        local petBtn = Instance.new("TextButton")
        petBtn.Name = "Pet_" .. pet.Name
        petBtn.Size = UDim2.new(0, 80, 1, -10)
        petBtn.Position = UDim2.new(0, 0, 0, 5)
        petBtn.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
        petBtn.BorderSizePixel = 0
        petBtn.Text = pet.Name:gsub(player.Name .. "_", "")
        petBtn.TextColor3 = Color3.new(1, 1, 1)
        petBtn.TextScaled = true
        petBtn.Font = Enum.Font.SourceSans
        petBtn.LayoutOrder = i
        petBtn.Parent = petArea

        local petBtnCorner = Instance.new("UICorner")
        petBtnCorner.CornerRadius = UDim.new(0, 4)
        petBtnCorner.Parent = petBtn

        totalWidth = totalWidth + 85

        -- Toggle pet assignment
        petBtn.MouseButton1Click:Connect(function()
            if not plantAssignments[plant] then
                plantAssignments[plant] = {pets = {}, position = plant.PrimaryPart.Position}
            end

            local petList = plantAssignments[plant].pets
            local petIndex = table.find(petList, pet)

            if petIndex then
                -- Remove pet
                table.remove(petList, petIndex)
                petBtn.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
                print("Removed", pet.Name, "from", plant.Name)
            else
                -- Add pet
                table.insert(petList, pet)
                petBtn.BackgroundColor3 = Color3.fromRGB(34, 139, 34)
                print("Assigned", pet.Name, "to", plant.Name)
            end

            -- Update pet count
            petCount.Text = "Pets: " .. #petList
        end)
    end

    -- Update canvas size
    petArea.CanvasSize = UDim2.new(0, totalWidth, 1, 0)

    -- Control Buttons
    local controlFrame = Instance.new("Frame")
    controlFrame.Size = UDim2.new(1, -20, 0, 25)
    controlFrame.Position = UDim2.new(0, 10, 1, -30)
    controlFrame.BackgroundTransparency = 1
    controlFrame.Parent = cardFrame

    local clearBtn = Instance.new("TextButton")
    clearBtn.Size = UDim2.new(0, 60, 1, 0)
    clearBtn.BackgroundColor3 = Color3.fromRGB(220, 53, 69)
    clearBtn.BorderSizePixel = 0
    clearBtn.Text = "Clear"
    clearBtn.TextColor3 = Color3.new(1, 1, 1)
    clearBtn.TextScaled = true
    clearBtn.Font = Enum.Font.SourceSans
    clearBtn.Parent = controlFrame

    local clearCorner = Instance.new("UICorner")
    clearCorner.CornerRadius = UDim.new(0, 4)
    clearCorner.Parent = clearBtn

    clearBtn.MouseButton1Click:Connect(function()
        plantAssignments[plant] = {pets = {}, position = plant.PrimaryPart.Position}
        petCount.Text = "Pets: 0"
        -- Reset all pet button colors
        for _, petBtn in pairs(petArea:GetChildren()) do
            if petBtn:IsA("TextButton") then
                petBtn.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
            end
        end
    end)
end

-- Pet Management System (Toucans-specific)
local function managePetPositions(deltaTime)
    lastUpdate = lastUpdate + deltaTime
    
    if lastUpdate >= UPDATE_INTERVAL then
        lastUpdate = 0
        
        for plant, data in pairs(plantAssignments) do
            if plant.Parent then
                local plantPos = nil
                
                -- Get plant position (handle both Models and Parts)
                if plant:IsA("Model") and plant.PrimaryPart then
                    plantPos = plant.PrimaryPart.Position
                elseif plant:IsA("Part") then
                    plantPos = plant.Position
                elseif plant:IsA("Model") then
                    -- If model has no PrimaryPart, find the first part
                    for _, child in pairs(plant:GetChildren()) do
                        if child:IsA("Part") then
                            plantPos = child.Position
                            break
                        end
                    end
                end
                
                if plantPos then
                    data.position = plantPos
                    
                    for i, pet in ipairs(data.pets) do
                        if pet.Parent then
                            local petPart = nil
                            
                            -- Get pet's main part (handle both Models and Parts)
                            if pet:IsA("Model") and pet.PrimaryPart then
                                petPart = pet.PrimaryPart
                            elseif pet:IsA("Part") then
                                petPart = pet
                            elseif pet:IsA("Model") then
                                -- Find the main part of the pet
                                petPart = pet:FindFirstChild("Torso") or 
                                         pet:FindFirstChild("HumanoidRootPart") or
                                         pet:FindFirstChild("Head") or
                                         pet:FindFirstChildOfClass("Part")
                            end
                            
                            if petPart then
                                -- Calculate target position around the Honey Suckle
                                local angle = (i - 1) * (math.pi * 2) / #data.pets
                                local targetPos = plantPos + Vector3.new(
                                    math.cos(angle) * PET_DISTANCE,
                                    2, -- Slightly above ground
                                    math.sin(angle) * PET_DISTANCE
                                )
                                
                                local currentPos = petPart.Position
                                local distance = (targetPos - currentPos).Magnitude
                                
                                -- Only move if pet is too far from target
                                if distance > 2 then
                                    print("Moving", pet.Name, "to Honey Suckle position")
                                    
                                    -- Use gentle positioning to preserve Toucan abilities
                                    local bodyPosition = petPart:FindFirstChild("BodyPosition")
                                    if not bodyPosition then
                                        bodyPosition = Instance.new("BodyPosition")
                                        bodyPosition.MaxForce = Vector3.new(2000, 0, 2000) -- No Y force to avoid flying
                                        bodyPosition.P = 3000 -- Gentle power
                                        bodyPosition.D = 300 -- Damping
                                        bodyPosition.Parent = petPart
                                    end
                                    
                                    bodyPosition.Position = targetPos
                                    
                                    -- Remove body position after a short time to let Toucan move naturally
                                    game:GetService("Debris"):AddItem(bodyPosition, 2)
                                else
                                    -- Pet is close enough, remove any positioning constraints
                                    local bodyPosition = petPart:FindFirstChild("BodyPosition")
                                    if bodyPosition then
                                        bodyPosition:Destroy()
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
    end
end

-- Main System
local function initializeSystem()
    local screenGui, mainFrame, iconFrame, contentFrame, refreshBtn, minimizeBtn = createMainGUI()
    
    -- Minimize/Maximize functionality
    local function minimizeMenu()
        local tween = TweenService:Create(
            mainFrame,
            TweenInfo.new(ANIMATION_TIME, Enum.EasingStyle.Quad),
            {Size = UDim2.new(0, 0, 0, 0)}
        )
        tween:Play()
        tween.Completed:Connect(function()
            mainFrame.Visible = false
            iconFrame.Visible = true
        end)
    end
    
    local function maximizeMenu()
        mainFrame.Visible = true
        mainFrame.Size = UDim2.new(0, 0, 0, 0)
        iconFrame.Visible = false
        local tween = TweenService:Create(
            mainFrame,
            TweenInfo.new(ANIMATION_TIME, Enum.EasingStyle.Quad),
            {Size = UDim2.new(0, 400, 0, 500)}
        )
        tween:Play()
    end
    
    minimizeBtn.MouseButton1Click:Connect(minimizeMenu)
    iconFrame.MouseButton1Click:Connect(maximizeMenu)
    
    -- Refresh functionality
    local function refreshContent()
        print("🔄 REFRESH BUTTON CLICKED!")
        
        findAllPlants()
        findAllPets()
        
        print("About to clear old plant cards...")
        
        -- Clear existing plant cards
        for _, child in pairs(contentFrame:GetChildren()) do
            if child.Name:find("PlantCard_") then
                print("Destroying old card:", child.Name)
                child:Destroy()
            end
        end
        
        print("Creating new plant cards...")
        
        -- Create new plant cards
        if #allPlants > 0 then
            for i, plant in ipairs(allPlants) do
                print("Creating card for plant:", plant.Name, "(" .. i .. "/" .. #allPlants .. ")")
                createPlantCard(plant, contentFrame)
            end
        else
            -- Show a message when no plants found
            local noPlantLabel = Instance.new("TextLabel")
            noPlantLabel.Name = "NoPlantMessage"
            noPlantLabel.Size = UDim2.new(1, 0, 0, 60)
            noPlantLabel.BackgroundColor3 = Color3.fromRGB(80, 40, 40)
            noPlantLabel.BorderSizePixel = 0
            noPlantLabel.Text = "No plants found!\nMake sure your plants are named with keywords like:\n'plant', 'crop', 'tree', 'flower', etc."
            noPlantLabel.TextColor3 = Color3.new(1, 1, 1)
            noPlantLabel.TextScaled = true
            noPlantLabel.Font = Enum.Font.SourceSans
            noPlantLabel.LayoutOrder = 2
            noPlantLabel.Parent = contentFrame
            
            local noPlantCorner = Instance.new("UICorner")
            noPlantCorner.CornerRadius = UDim.new(0, 8)
            noPlantCorner.Parent = noPlantLabel
        end
        
        -- Show pets found info
        local petInfoLabel = Instance.new("TextLabel")
        petInfoLabel.Name = "PetInfo"
        petInfoLabel.Size = UDim2.new(1, 0, 0, 30)
        petInfoLabel.BackgroundColor3 = Color3.fromRGB(34, 139, 34)
        petInfoLabel.BorderSizePixel = 0
        petInfoLabel.Text = "Found " .. #allPets .. " pets and " .. #allPlants .. " plants"
        petInfoLabel.TextColor3 = Color3.new(1, 1, 1)
        petInfoLabel.TextScaled = true
        petInfoLabel.Font = Enum.Font.SourceSansBold
        petInfoLabel.LayoutOrder = 1.5
        petInfoLabel.Parent = contentFrame
        
        local petInfoCorner = Instance.new("UICorner")
        petInfoCorner.CornerRadius = UDim.new(0, 8)
        petInfoCorner.Parent = petInfoLabel
        
        -- Remove old info labels
        wait(0.1) -- Brief delay to let layout update
        for _, child in pairs(contentFrame:GetChildren()) do
            if child.Name == "PetInfo" and child ~= petInfoLabel then
                child:Destroy()
            end
        end
        
        -- Update canvas size
        local totalHeight = 100 + (#allPlants * 130) + 50
        contentFrame.CanvasSize = UDim2.new(0, 0, 0, totalHeight)
        
        print("✅ Refresh complete! Canvas size:", totalHeight)
    end
    
    refreshBtn.MouseButton1Click:Connect(refreshContent)
    
    -- Keyboard shortcut (P key to toggle)
    UserInputService.InputBegan:Connect(function(input, gameProcessed)
        if gameProcessed then return end
        if input.KeyCode == Enum.KeyCode.P then
            if mainFrame.Visible then
                minimizeMenu()
            else
                maximizeMenu()
            end
        end
    end)
    
    -- Start pet management
    RunService.Heartbeat:Connect(managePetPositions)
    
    -- Initial refresh
    refreshContent()
    
    print("Pet Plant Manager initialized! Press P to toggle or use the minimize button.")
end

-- Start the system
initializeSystem()
