-- Pet Plant Manager for Grow a Garden (Roblox) - COMPLETELY REWRITTEN
-- Keeps pets near Honeysuckle plants for ability farming
-- Place this in StarterGui or StarterPlayerScripts

local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local player = Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")

-- Configuration
local PET_DISTANCE = 8 -- How close pets stay to assigned plants
local UPDATE_INTERVAL = 0.1 -- Faster updates for better responsiveness
local ANIMATION_TIME = 0.3

-- Data storage
local honeysucklePlants = {}
local activePets = {}
local petAssignments = {} -- [petId] = plantPosition
local lastUpdate = 0
local managementEnabled = false
local debugMode = true -- Enable for console output

-- GUI Creation
local function createMainGUI()
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "PetPlantManager"
    screenGui.ResetOnSpawn = false
    screenGui.Parent = playerGui

    -- Minimized Icon
    local iconFrame = Instance.new("ImageButton")
    iconFrame.Name = "MinimizedIcon"
    iconFrame.Size = UDim2.new(0, 60, 0, 60)
    iconFrame.Position = UDim2.new(0, 20, 0.5, -30)
    iconFrame.BackgroundColor3 = Color3.fromRGB(34, 139, 34)
    iconFrame.BorderSizePixel = 0
    iconFrame.Visible = false
    iconFrame.Parent = screenGui

    local iconCorner = Instance.new("UICorner")
    iconCorner.CornerRadius = UDim.new(0, 30)
    iconCorner.Parent = iconFrame

    local iconLabel = Instance.new("TextLabel")
    iconLabel.Size = UDim2.new(1, 0, 1, 0)
    iconLabel.BackgroundTransparency = 1
    iconLabel.Text = "üå±"
    iconLabel.TextColor3 = Color3.new(1, 1, 1)
    iconLabel.TextScaled = true
    iconLabel.Font = Enum.Font.SourceSansBold
    iconLabel.Parent = iconFrame

    -- Main Menu Frame
    local mainFrame = Instance.new("Frame")
    mainFrame.Name = "MainMenu"
    mainFrame.Size = UDim2.new(0, 400, 0, 600)
    mainFrame.Position = UDim2.new(0.5, -200, 0.5, -300)
    mainFrame.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
    mainFrame.BorderSizePixel = 0
    mainFrame.Active = true
    mainFrame.Draggable = true
    mainFrame.Parent = screenGui

    local mainCorner = Instance.new("UICorner")
    mainCorner.CornerRadius = UDim.new(0, 12)
    mainCorner.Parent = mainFrame

    -- Title Bar
    local titleBar = Instance.new("Frame")
    titleBar.Name = "TitleBar"
    titleBar.Size = UDim2.new(1, 0, 0, 40)
    titleBar.BackgroundColor3 = Color3.fromRGB(34, 139, 34)
    titleBar.BorderSizePixel = 0
    titleBar.Parent = mainFrame

    local titleCorner = Instance.new("UICorner")
    titleCorner.CornerRadius = UDim.new(0, 12)
    titleCorner.Parent = titleBar

    local titleFix = Instance.new("Frame")
    titleFix.Size = UDim2.new(1, 0, 0, 12)
    titleFix.Position = UDim2.new(0, 0, 1, -12)
    titleFix.BackgroundColor3 = Color3.fromRGB(34, 139, 34)
    titleFix.BorderSizePixel = 0
    titleFix.Parent = titleBar

    local titleLabel = Instance.new("TextLabel")
    titleLabel.Size = UDim2.new(1, -80, 1, 0)
    titleLabel.Position = UDim2.new(0, 10, 0, 0)
    titleLabel.BackgroundTransparency = 1
    titleLabel.Text = "Pet Plant Manager - REWRITTEN"
    titleLabel.TextColor3 = Color3.new(1, 1, 1)
    titleLabel.TextScaled = true
    titleLabel.Font = Enum.Font.SourceSansBold
    titleLabel.TextXAlignment = Enum.TextXAlignment.Left
    titleLabel.Parent = titleBar

    -- Minimize Button
    local minimizeBtn = Instance.new("TextButton")
    minimizeBtn.Name = "MinimizeButton"
    minimizeBtn.Size = UDim2.new(0, 30, 0, 30)
    minimizeBtn.Position = UDim2.new(1, -40, 0, 5)
    minimizeBtn.BackgroundColor3 = Color3.fromRGB(255, 193, 7)
    minimizeBtn.BorderSizePixel = 0
    minimizeBtn.Text = "‚Äî"
    minimizeBtn.TextColor3 = Color3.new(0, 0, 0)
    minimizeBtn.TextScaled = true
    minimizeBtn.Font = Enum.Font.SourceSansBold
    minimizeBtn.Parent = titleBar

    local minCorner = Instance.new("UICorner")
    minCorner.CornerRadius = UDim.new(0, 15)
    minCorner.Parent = minimizeBtn

    -- Content Area
    local contentFrame = Instance.new("ScrollingFrame")
    contentFrame.Name = "Content"
    contentFrame.Size = UDim2.new(1, -20, 1, -60)
    contentFrame.Position = UDim2.new(0, 10, 0, 50)
    contentFrame.BackgroundTransparency = 1
    contentFrame.ScrollBarThickness = 8
    contentFrame.ScrollBarImageColor3 = Color3.fromRGB(34, 139, 34)
    contentFrame.Parent = mainFrame

    local contentLayout = Instance.new("UIListLayout")
    contentLayout.SortOrder = Enum.SortOrder.LayoutOrder
    contentLayout.Padding = UDim.new(0, 10)
    contentLayout.Parent = contentFrame

    -- Status Label
    local statusLabel = Instance.new("TextLabel")
    statusLabel.Name = "StatusLabel"
    statusLabel.Size = UDim2.new(1, 0, 0, 50)
    statusLabel.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
    statusLabel.BorderSizePixel = 0
    statusLabel.Text = "Ready - Press Scan to find plants and pets"
    statusLabel.TextColor3 = Color3.new(1, 1, 1)
    statusLabel.TextScaled = true
    statusLabel.Font = Enum.Font.SourceSans
    statusLabel.LayoutOrder = 0
    statusLabel.Parent = contentFrame

    local statusCorner = Instance.new("UICorner")
    statusCorner.CornerRadius = UDim.new(0, 8)
    statusCorner.Parent = statusLabel

    -- Scan Button
    local scanBtn = Instance.new("TextButton")
    scanBtn.Name = "ScanButton"
    scanBtn.Size = UDim2.new(1, 0, 0, 35)
    scanBtn.BackgroundColor3 = Color3.fromRGB(34, 139, 34)
    scanBtn.BorderSizePixel = 0
    scanBtn.Text = "üîç Scan for Plants & Pets"
    scanBtn.TextColor3 = Color3.new(1, 1, 1)
    scanBtn.TextScaled = true
    scanBtn.Font = Enum.Font.SourceSans
    scanBtn.LayoutOrder = 1
    scanBtn.Parent = contentFrame

    local scanCorner = Instance.new("UICorner")
    scanCorner.CornerRadius = UDim.new(0, 8)
    scanCorner.Parent = scanBtn

    -- Assign All Button
    local assignBtn = Instance.new("TextButton")
    assignBtn.Name = "AssignButton"
    assignBtn.Size = UDim2.new(1, 0, 0, 35)
    assignBtn.BackgroundColor3 = Color3.fromRGB(255, 193, 7)
    assignBtn.BorderSizePixel = 0
    assignBtn.Text = "üéØ Assign All Pets to Closest Honeysuckle"
    assignBtn.TextColor3 = Color3.new(0, 0, 0)
    assignBtn.TextScaled = true
    assignBtn.Font = Enum.Font.SourceSans
    assignBtn.LayoutOrder = 2
    assignBtn.Parent = contentFrame

    local assignCorner = Instance.new("UICorner")
    assignCorner.CornerRadius = UDim.new(0, 8)
    assignCorner.Parent = assignBtn

    -- Management Toggle Button
    local toggleBtn = Instance.new("TextButton")
    toggleBtn.Name = "ToggleButton"
    toggleBtn.Size = UDim2.new(1, 0, 0, 40)
    toggleBtn.BackgroundColor3 = Color3.fromRGB(220, 53, 69)
    toggleBtn.BorderSizePixel = 0
    toggleBtn.Text = "‚ñ∂Ô∏è START PET STICKING"
    toggleBtn.TextColor3 = Color3.new(1, 1, 1)
    toggleBtn.TextScaled = true
    toggleBtn.Font = Enum.Font.SourceSansBold
    toggleBtn.LayoutOrder = 3
    toggleBtn.Parent = contentFrame

    local toggleCorner = Instance.new("UICorner")
    toggleCorner.CornerRadius = UDim.new(0, 8)
    toggleCorner.Parent = toggleBtn

    -- Debug Info
    local debugLabel = Instance.new("TextLabel")
    debugLabel.Name = "DebugLabel"
    debugLabel.Size = UDim2.new(1, 0, 0, 100)
    debugLabel.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    debugLabel.BorderSizePixel = 0
    debugLabel.Text = "Debug Info:\nNo data yet"
    debugLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
    debugLabel.TextScaled = true
    debugLabel.Font = Enum.Font.SourceSans
    debugLabel.TextYAlignment = Enum.TextYAlignment.Top
    debugLabel.LayoutOrder = 4
    debugLabel.Parent = contentFrame

    local debugCorner = Instance.new("UICorner")
    debugCorner.CornerRadius = UDim.new(0, 8)
    debugCorner.Parent = debugLabel

    return screenGui, mainFrame, iconFrame, contentFrame, scanBtn, assignBtn, minimizeBtn, statusLabel, toggleBtn, debugLabel
end

-- Find ONLY Honeysuckle plant positions (avoid duplicates)
local function findHoneysucklePlants()
    honeysucklePlants = {}
    
    if debugMode then print("=== SEARCHING FOR HONEYSUCKLE PLANTS ===") end
    
    -- Look for honeysuckle in Plants_Physical
    local farmPath = workspace:FindFirstChild("Farm")
    if farmPath then
        farmPath = farmPath:FindFirstChild("Farm")
        if farmPath then
            farmPath = farmPath:FindFirstChild("Important")
            if farmPath then
                farmPath = farmPath:FindFirstChild("Plants_Physical")
                if farmPath then
                    for _, plantFolder in pairs(farmPath:GetChildren()) do
                        if plantFolder.Name == "Honeysuckle" and plantFolder:IsA("Folder") then
                            -- Get the main position of this plant
                            local plantPosition = nil
                            
                            -- Try to find a part or model with position
                            for _, child in pairs(plantFolder:GetDescendants()) do
                                if child:IsA("Part") and child.Name ~= "Honeysuckle" then -- Avoid fruit duplicates
                                    plantPosition = child.Position
                                    break
                                elseif child:IsA("Model") and child.PrimaryPart then
                                    plantPosition = child.PrimaryPart.Position
                                    break
                                end
                            end
                            
                            if plantPosition then
                                table.insert(honeysucklePlants, {
                                    object = plantFolder,
                                    position = plantPosition,
                                    name = "Honeysuckle Plant #" .. (#honeysucklePlants + 1)
                                })
                                if debugMode then 
                                    print("‚úÖ Found Honeysuckle at:", plantPosition)
                                end
                            end
                        end
                    end
                end
            end
        end
    end
    
    if debugMode then 
        print("=== HONEYSUCKLE SEARCH COMPLETE ===")
        print("Total plants found:", #honeysucklePlants)
    end
    
    return #honeysucklePlants
end

-- Find active pets from GUI and get their data
local function findActivePets()
    activePets = {}
    
    if debugMode then print("=== SEARCHING FOR ACTIVE PETS ===") end
    
    local activePetUI = playerGui:FindFirstChild("ActivePetUI")
    if activePetUI then
        local frame = activePetUI:FindFirstChild("Frame")
        if frame then
            local main = frame:FindFirstChild("Main")
            if main then
                local scrollingFrame = main:FindFirstChild("ScrollingFrame")
                if scrollingFrame then
                    if debugMode then print("‚úÖ Found pet GUI structure") end
                    
                    -- Get all pet frames from the scrolling frame
                    for _, petFrame in pairs(scrollingFrame:GetChildren()) do
                        if petFrame:IsA("Frame") and petFrame.Name ~= "UIListLayout" then
                            -- Extract pet information from the GUI
                            local petData = {
                                id = petFrame.Name,
                                guiFrame = petFrame,
                                name = "Pet_" .. petFrame.Name
                            }
                            
                            -- Try to find position data in the pet frame
                            for _, child in pairs(petFrame:GetDescendants()) do
                                if child:IsA("TextLabel") and child.Text:find("Position") then
                                    -- Extract position if available
                                    local posText = child.Text
                                    if debugMode then print("Found position text:", posText) end
                                end
                            end
                            
                            table.insert(activePets, petData)
                            if debugMode then 
                                print("‚úÖ Found pet:", petData.id)
                            end
                        end
                    end
                end
            end
        end
    end
    
    if debugMode then 
        print("=== PET SEARCH COMPLETE ===")
        print("Total active pets found:", #activePets)
    end
    
    return #activePets
end

-- Find the closest honeysuckle to player
local function getClosestHoneysuckle()
    if #honeysucklePlants == 0 or not player.Character or not player.Character:FindFirstChild("HumanoidRootPart") then
        return nil
    end
    
    local playerPos = player.Character.HumanoidRootPart.Position
    local closest = nil
    local closestDistance = math.huge
    
    for _, plant in ipairs(honeysucklePlants) do
        local distance = (plant.position - playerPos).Magnitude
        if distance < closestDistance then
            closestDistance = distance
            closest = plant
        end
    end
    
    return closest
end

-- Assign all pets to the closest honeysuckle
local function assignAllPetsToClosest()
    local targetPlant = getClosestHoneysuckle()
    if not targetPlant then
        if debugMode then print("‚ùå No honeysuckle plants found to assign to") end
        return false
    end
    
    petAssignments = {}
    
    for _, pet in ipairs(activePets) do
        petAssignments[pet.id] = targetPlant.position
        if debugMode then 
            print("‚úÖ Assigned", pet.id, "to honeysuckle at", targetPlant.position)
        end
    end
    
    if debugMode then print("‚úÖ All", #activePets, "pets assigned to closest honeysuckle") end
    return true
end

-- NEW METHOD: Use RemoteEvents to move pets (if available)
local function tryMoveViaRemote(petId, targetPosition)
    -- Look for pet movement remotes in ReplicatedStorage
    for _, remote in pairs(ReplicatedStorage:GetDescendants()) do
        if remote:IsA("RemoteEvent") and (remote.Name:find("Pet") or remote.Name:find("Move")) then
            pcall(function()
                remote:FireServer(petId, targetPosition)
            end)
            if debugMode then print("Tried moving", petId, "via remote:", remote.Name) end
        end
    end
end

-- NEW METHOD: Try to manipulate pet GUI to move pets
local function tryMoveViaGUI(petId, targetPosition)
    local activePetUI = playerGui:FindFirstChild("ActivePetUI")
    if activePetUI then
        -- Look for movement controls in the pet GUI
        for _, obj in pairs(activePetUI:GetDescendants()) do
            if obj:IsA("TextButton") and (obj.Text:find("Move") or obj.Text:find("Go")) then
                -- Try clicking movement buttons
                pcall(function()
                    for i = 1, 3 do
                        obj.MouseButton1Click:Fire()
                        wait(0.1)
                    end
                end)
            end
        end
    end
end

-- NEW METHOD: Look for pets in workspace and use CFrame manipulation
local function tryMoveViaWorkspace(petId, targetPosition)
    for _, obj in pairs(workspace:GetDescendants()) do
        if (obj.Name:find(petId) or obj.Name:find("Pet")) and obj:IsA("Part") then
            pcall(function()
                obj.CFrame = CFrame.new(targetPosition + Vector3.new(math.random(-5, 5), 2, math.random(-5, 5)))
            end)
            if debugMode then print("Moved", obj.Name, "in workspace to", targetPosition) end
        end
    end
end

-- Pet Management System - Try multiple movement methods
local function managePetPositions(deltaTime)
    if not managementEnabled or #petAssignments == 0 then return end
    
    lastUpdate = lastUpdate + deltaTime
    
    if lastUpdate >= UPDATE_INTERVAL then
        lastUpdate = 0
        
        for petId, targetPosition in pairs(petAssignments) do
            -- Try all available movement methods
            tryMoveViaRemote(petId, targetPosition)
            tryMoveViaGUI(petId, targetPosition)
            tryMoveViaWorkspace(petId, targetPosition)
        end
    end
end

-- Main System
local function initializeSystem()
    local screenGui, mainFrame, iconFrame, contentFrame, scanBtn, assignBtn, minimizeBtn, statusLabel, toggleBtn, debugLabel = createMainGUI()
    
    -- Minimize/Maximize functionality
    local function minimizeMenu()
        local tween = TweenService:Create(
            mainFrame,
            TweenInfo.new(ANIMATION_TIME, Enum.EasingStyle.Quad),
            {Size = UDim2.new(0, 0, 0, 0)}
        )
        tween:Play()
        tween.Completed:Connect(function()
            mainFrame.Visible = false
            iconFrame.Visible = true
        end)
    end
    
    local function maximizeMenu()
        mainFrame.Visible = true
        mainFrame.Size = UDim2.new(0, 0, 0, 0)
        iconFrame.Visible = false
        local tween = TweenService:Create(
            mainFrame,
            TweenInfo.new(ANIMATION_TIME, Enum.EasingStyle.Quad),
            {Size = UDim2.new(0, 400, 0, 600)}
        )
        tween:Play()
    end
    
    minimizeBtn.MouseButton1Click:Connect(minimizeMenu)
    iconFrame.MouseButton1Click:Connect(maximizeMenu)
    
    -- Toggle Management
    local function toggleManagement()
        managementEnabled = not managementEnabled
        
        if managementEnabled then
            toggleBtn.Text = "‚èπÔ∏è STOP PET STICKING"
            toggleBtn.BackgroundColor3 = Color3.fromRGB(34, 139, 34)
            statusLabel.Text = "‚úÖ Pet sticking is ACTIVE"
        else
            toggleBtn.Text = "‚ñ∂Ô∏è START PET STICKING"
            toggleBtn.BackgroundColor3 = Color3.fromRGB(220, 53, 69)
            statusLabel.Text = "‚è∏Ô∏è Pet sticking is STOPPED"
        end
    end
    
    toggleBtn.MouseButton1Click:Connect(toggleManagement)
    
    -- Scan functionality
    local function performScan()
        if debugMode then print("üîç SCANNING...") end
        statusLabel.Text = "üîç Scanning for plants and pets..."
        
        local plantsFound = findHoneysucklePlants()
        local petsFound = findActivePets()
        
        statusLabel.Text = string.format("‚úÖ Found %d plants, %d pets", plantsFound, petsFound)
        
        debugLabel.Text = string.format("Debug Info:\nPlants: %d\nPets: %d\nAssignments: %d\nManagement: %s", 
            plantsFound, petsFound, #petAssignments, managementEnabled and "ON" or "OFF")
        
        -- Update canvas size
        contentFrame.CanvasSize = UDim2.new(0, 0, 0, 400)
    end
    
    scanBtn.MouseButton1Click:Connect(performScan)
    
    -- Assign functionality
    local function performAssignment()
        if #honeysucklePlants == 0 or #activePets == 0 then
            statusLabel.Text = "‚ùå Scan first to find plants and pets!"
            return
        end
        
        local success = assignAllPetsToClosest()
        if success then
            assignBtn.Text = "‚úÖ All Pets Assigned!"
            assignBtn.BackgroundColor3 = Color3.fromRGB(0, 150, 0)
            statusLabel.Text = string.format("‚úÖ Assigned %d pets to honeysuckle", #activePets)
        else
            statusLabel.Text = "‚ùå Assignment failed - check console"
        end
    end
    
    assignBtn.MouseButton1Click:Connect(performAssignment)
    
    -- Keyboard shortcut (H key)
    UserInputService.InputBegan:Connect(function(input, gameProcessed)
        if gameProcessed then return end
        if input.KeyCode == Enum.KeyCode.H then
            if mainFrame.Visible then
                minimizeMenu()
            else
                maximizeMenu()
            end
        end
    end)
    
    -- Start pet management loop
    RunService.Heartbeat:Connect(managePetPositions)
    
    -- Auto-scan on startup
    wait(1)
    performScan()
    
    print("‚úÖ Pet Plant Manager (REWRITTEN) initialized!")
    print("üìã Press H to toggle GUI")
    print("üìã 1. Scan for plants and pets")
    print("üìã 2. Assign all pets to closest honeysuckle") 
    print("üìã 3. Start pet sticking to keep them near the plant")
end

-- Start the system
initializeSystem()
